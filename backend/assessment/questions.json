[
    {
      "id": 1,
      "role": "frontend",
      "question": "Create an HTML page with a button that changes the background color of a div when clicked.",
      "function_name": "toggleDivColor",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "<div id=\"colorBox\" style=\"width: 200px; height: 200px; background-color: blue;\"></div>\n<button id=\"changeColor\">Change Color</button>",
          "output": "Initial div background: blue\nAfter button click: background changes to red\nMultiple clicks toggle between blue and red"
        }
      ]
    },
    {
      "id": 2,
      "role": "frontend",
      "question": "Create a form with email validation that shows error messages.",
      "function_name": "validateEmailForm",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "<form id=\"emailForm\">\n  <input type=\"email\" id=\"email\" placeholder=\"Enter email\" required>\n  <button type=\"submit\">Submit</button>\n  <div id=\"error-message\"></div>\n</form>",
          "output": "Valid email: form submits successfully\nInvalid email: shows error 'Please enter a valid email'\nEmpty field: shows error 'Email is required'"
        }
      ]
    },
    {
      "id": 3,
      "role": "frontend",
      "question": "Create a function that filters and displays a list of products based on price range.",
      "function_name": "filterProducts",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "const products = [\n  {name: \"Laptop\", price: 999},\n  {name: \"Phone\", price: 599},\n  {name: \"Tablet\", price: 299},\n  {name: \"Watch\", price: 199},\n  {name: \"Headphones\", price: 149}\n];\nfilterProducts(products, 200, 600)",
          "output": "Phone - $599\nTablet - $299"
        }
      ]
    },
    {
      "id": 4,
      "role": "frontend",
      "question": "Create a responsive navigation bar using Flexbox.",
      "function_name": "responsiveNavBar",
      "language": "css",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "Desktop (>768px): Horizontal layout\nMobile (≤768px): Vertical stacked layout",
          "output": "Logo on left, nav links center, search right (desktop)\nStacked vertically (mobile)"
        }
      ]
    },
    {
      "id": 5,
      "role": "frontend",
      "question": "Create a dynamic list where clicking on any item shows its details, and new items can be added.",
      "function_name": "dynamicListWithDelegation",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "const items = [\"Apple\", \"Banana\", \"Orange\"]",
          "output": "Clicking 'Apple' → alert 'Selected: Apple'\nAdding 'Grape' → new item appears and is clickable"
        }
      ]
    },
    {
      "id": 6,
      "role": "frontend",
      "question": "Create a React counter component with increment/decrement buttons.",
      "function_name": "Counter",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "// Initial state: count = 0\n// Click increment 3 times\n// Click decrement 1 time",
          "output": "// count = 2\n// Count never below 0"
        }
      ]
    },
    {
      "id": 7,
      "role": "frontend",
      "question": "Create a responsive photo gallery using CSS Grid.",
      "function_name": "responsivePhotoGallery",
      "language": "css",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "<div class=\"gallery\">\n  <img src=\"img1.jpg\" alt=\"Photo 1\">\n  <img src=\"img2.jpg\" alt=\"Photo 2\">\n  <img src=\"img3.jpg\" alt=\"Photo 3\">\n  <img src=\"img4.jpg\" alt=\"Photo 4\">\n  <img src=\"img5.jpg\" alt=\"Photo 5\">\n  <img src=\"img6.jpg\" alt=\"Photo 6\">\n</div>",
          "output": "3 columns (desktop), 2 columns (tablet), 1 column (mobile), equal height/aspect"
        }
      ]
    },
    {
      "id": 8,
      "role": "frontend",
      "question": "Fetch data from multiple APIs and combine the results.",
      "function_name": "fetchUserNames",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "const urls = [\n  'https://jsonplaceholder.typicode.com/users/1',\n  'https://jsonplaceholder.typicode.com/users/2',\n  'https://jsonplaceholder.typicode.com/users/3'\n];",
          "output": "[\"Leanne Graham\", \"Ervin Howell\", \"Clementine Bauch\"]"
        }
      ]
    },
    {
      "id": 9,
      "role": "frontend",
      "question": "Create a TodoList component that manages tasks with add/remove functionality.",
      "function_name": "TodoList",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "const initialTodos = [\n  {id: 1, text: \"Learn React\", completed: false},\n  {id: 2, text: \"Build a project\", completed: true}\n];",
          "output": "Display todos, add/remove, toggle complete, show completed/total count"
        }
      ]
    },
    {
      "id": 10,
      "role": "frontend",
      "question": "Create a loading spinner and a hover card effect.",
      "function_name": "spinnerAndHoverCard",
      "language": "css",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "<div class=\"loader\"></div>\n<div class=\"card\">\n  <h3>Hover over me</h3>\n  <p>I should lift up with a shadow</p>\n</div>",
          "output": "Loader spins, card lifts/shadows on hover, smooth 0.3s transitions"
        }
      ]
    },
    {
      "id": 11,
      "role": "frontend",
      "question": "Create a notes app that persists data in localStorage.",
      "function_name": "notesApp",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "// Add note: \"Meeting at 3pm\"\n// Refresh page\n// Add note: \"Buy groceries\"\n// Delete first note\n// Clear all notes",
          "output": "// Notes persist, delete and clear work, localStorage updates"
        }
      ]
    },
    {
      "id": 12,
      "role": "frontend",
      "question": "Create a component that fetches and displays user data with loading states.",
      "function_name": "UserListWithLoading",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "https://jsonplaceholder.typicode.com/users",
          "output": "Shows 'Loading...' → displays users → shows error if fetch fails, cleans up on unmount"
        }
      ]
    },
    {
      "id": 13,
      "role": "frontend",
      "question": "Create a responsive dashboard layout.",
      "function_name": "responsiveDashboard",
      "language": "css",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "Desktop: >1024px\nTablet: 1024px-768px\nMobile: <768px",
          "output": "Sidebar+main (desktop), top nav (tablet), hamburger/collapsible (mobile)"
        }
      ]
    },
    {
      "id": 14,
      "role": "frontend",
      "question": "Create a function factory that generates specialized counter functions.",
      "function_name": "createCounter",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "const evenCounter = createCounter(0, 2);\nconst oddCounter = createCounter(1, 2);\nevenCounter(); // 0, 2, 4\noddCounter(); // 1, 3, 5",
          "output": "Each counter independent, maintains private state, includes reset"
        }
      ]
    },
    {
      "id": 15,
      "role": "frontend",
      "question": "Create a theme provider that manages dark/light mode across components.",
      "function_name": "ThemeProvider",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "// App wraps components with ThemeProvider\n// Header shows theme and toggle\n// Content applies theme styles",
          "output": "Theme state persists, toggle works, styles update"
        }
      ]
    },
    {
      "id": 16,
      "role": "frontend",
      "question": "Create a fluid typography and spacing system using CSS custom properties.",
      "function_name": "fluidTypographySpacing",
      "language": "css",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": ".text-sm, .text-base, .text-lg\n.space-1, .space-2, .space-3",
          "output": "Font sizes and spacing scale responsively with clamp/calc"
        }
      ]
    },
    {
      "id": 17,
      "role": "frontend",
      "question": "Optimize a component that renders a large list with search functionality.",
      "function_name": "LargeListSearch",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "10,000 items, search input",
          "output": "Uses React.memo, debounced search, useMemo, (bonus: virtual scroll)"
        }
      ]
    },
    {
      "id": 18,
      "role": "frontend",
      "question": "Create a shopping cart with complex state logic using useReducer.",
      "function_name": "ShoppingCartReducer",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "ADD_ITEM, UPDATE_QUANTITY, APPLY_COUPON, CALCULATE_TOTAL",
          "output": "Handles state, discounts, edge cases, returns correct totals"
        }
      ]
    },
    {
      "id": 19,
      "role": "frontend",
      "question": "Implement a data fetching hook with caching, error retry, and race condition handling.",
      "function_name": "useApiData",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "useApiData('/api/users', { retry: 3, cache: true, retryDelay: 1000 })",
          "output": "{ data, loading, error, refetch } with caching, retry, cancellation"
        }
      ]
    },
    {
      "id": 20,
      "role": "frontend",
      "question": "Build a real-time chat interface with message persistence and user management.",
      "function_name": "ChatApp",
      "language": "javascript",
      "answered": {
        "code": "",
        "evaluation": ""
      },
      "answeredcheck": false,
      "test_cases": [
        {
          "input": "// User login, send/receive message, switch users, mobile view, logout",
          "output": "Real-time messaging, history persistence, user state, emoji/file, typing, statuses"
        }
      ]
    },
    {
        "id": 21,
        "role": "backend",
        "question": "Write a function that takes a list of strings and returns the frequency of each string.",
        "function_name": "count_string_frequency",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]",
            "output": "{\"apple\": 3, \"banana\": 2, \"orange\": 1}"
          }
        ]
    },
    {
        "id": 22,
        "role": "backend",
        "question": "Write a function that counts string frequencies case-insensitively and returns results in lowercase.",
        "function_name": "case_insensitive_frequency",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "strings = [\"Apple\", \"BANANA\", \"apple\", \"Orange\", \"banana\", \"APPLE\"]",
            "output": "{\"apple\": 3, \"banana\": 2, \"orange\": 1}"
          }
        ]
    },
    {
        "id": 23,
        "role": "backend",
        "question": "Write a function that takes a list of sentences and returns the frequency of each word across all sentences.",
        "function_name": "word_frequency_sentences",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "sentences = [\"the cat sat on the mat\", \"the dog ran in the park\", \"a cat and a dog played\"]",
            "output": "{\"the\": 4, \"cat\": 2, \"dog\": 2, \"sat\": 1, \"on\": 1, \"mat\": 1, \"ran\": 1, \"in\": 1, \"park\": 1, \"a\": 2, \"and\": 1, \"played\": 1}"
          }
        ]
    },
    {
        "id": 24,
        "role": "backend",
        "question": "Write a function that counts character frequencies in a list of strings, ignoring spaces and punctuation, and only counting alphabetic characters.",
        "function_name": "character_frequency_filtered",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "strings = [\"Hello, World!\", \"Python Programming\", \"Data Structures & Algorithms\"]",
            "output": "{\"h\": 2, \"e\": 2, \"l\": 6, \"o\": 4, \"w\": 1, \"r\": 8, \"d\": 2, \"p\": 2, \"y\": 1, \"t\": 7, \"n\": 4, \"g\": 4, \"m\": 3, \"i\": 2, \"a\": 4, \"s\": 3, \"u\": 2, \"c\": 1}"
          }
        ]
    },
    {
        "id": 25,
        "role": "backend",
        "question": "Write a function that returns the K most frequent strings from a list, sorted by frequency (descending) and then alphabetically for ties.",
        "function_name": "top_k_frequent",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "strings = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"date\", \"cherry\"], k = 3",
            "output": "[(\"apple\", 3), (\"banana\", 2), (\"cherry\", 2)]"
          }
        ]
    },
    {
        "id": 26,
        "role": "backend",
        "question": "Write a function that groups strings by their length and returns frequency count for each group.",
        "function_name": "group_by_length_frequency",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "strings = [\"cat\", \"dog\", \"elephant\", \"rat\", \"hippopotamus\", \"ox\", \"tiger\", \"lion\"]",
            "output": "{\n  2: {\"ox\": 1},\n  3: {\"cat\": 1, \"dog\": 1, \"rat\": 1},\n  4: {\"lion\": 1},\n  5: {\"tiger\": 1},\n  8: {\"elephant\": 1},\n  12: {\"hippopotamus\": 1}\n}"
          }
        ]
    },
    {
        "id": 27,
        "role": "backend",
        "question": "Write a function that takes a list of dictionaries representing students and their subjects, and returns the frequency of each subject across all students.",
        "function_name": "subject_frequency",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "students = [\n    {\"name\": \"Alice\", \"subjects\": [\"Math\", \"Physics\", \"Chemistry\"]},\n    {\"name\": \"Bob\", \"subjects\": [\"Math\", \"Biology\", \"Chemistry\"]},\n    {\"name\": \"Charlie\", \"subjects\": [\"Physics\", \"Biology\", \"English\"]},\n    {\"name\": \"Diana\", \"subjects\": [\"Math\", \"English\", \"Chemistry\"]}\n]",
            "output": "{\"Math\": 3, \"Chemistry\": 3, \"Physics\": 2, \"Biology\": 2, \"English\": 2}"
          }
        ]
    },
    {
        "id": 28,
        "role": "backend",
        "question": "Write a function that takes a list of log entries (timestamp, event) and returns frequency of events grouped by hour of the day.",
        "function_name": "event_frequency_by_hour",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "logs = [\n    (\"2024-01-15 09:30:00\", \"login\"),\n    (\"2024-01-15 09:45:00\", \"logout\"),\n    (\"2024-01-15 10:15:00\", \"login\"),\n    (\"2024-01-15 14:30:00\", \"error\"),\n    (\"2024-01-15 14:35:00\", \"login\"),\n    (\"2024-01-15 15:20:00\", \"logout\")\n]",
            "output": "{\n  9: {\"login\": 1, \"logout\": 1},\n  10: {\"login\": 1},\n  14: {\"error\": 1, \"login\": 1},\n  15: {\"logout\": 1}\n}"
          }
        ]
    },
    {
        "id": 29,
        "role": "backend",
        "question": "Write a function that finds and counts frequencies of email domains from a list of email addresses, categorizing them as 'personal' (gmail, yahoo, hotmail) or 'business' (others).",
        "function_name": "categorize_email_domains",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "emails = [\n    \"john@gmail.com\", \"alice@company.com\", \"bob@yahoo.com\", \n    \"charlie@gmail.com\", \"diana@organization.org\", \"eve@hotmail.com\",\n    \"frank@business.net\", \"grace@gmail.com\"\n]",
            "output": "{\n  \"personal\": {\"gmail.com\": 3, \"yahoo.com\": 1, \"hotmail.com\": 1},\n  \"business\": {\"company.com\": 1, \"organization.org\": 1, \"business.net\": 1}\n}"
          }
        ]
    },
    {
        "id": 30,
        "role": "backend",
        "question": "Write a function that analyzes a list of product reviews and returns:1. Frequency of sentiment words (positive: good, great, excellent; negative: bad, poor, terrible) 2. Average sentiment score per product (positive words = +1, negative words = -1) 3. Products ranked by sentiment score",
        "function_name": "analyze_reviews_sentiment",
        "language": "python",
        "answered": {
          "code": "",
          "evaluation": ""
        },
        "answeredcheck": false,
        "test_cases": [
          {
            "input": "reviews = [\n    {\"product\": \"Laptop\", \"review\": \"This laptop is excellent and great for work\"},\n    {\"product\": \"Phone\", \"review\": \"The phone is good but battery is poor\"},\n    {\"product\": \"Laptop\", \"review\": \"Great performance but poor customer service\"},\n    {\"product\": \"Tablet\", \"review\": \"Terrible experience, very bad quality\"},\n    {\"product\": \"Phone\", \"review\": \"Excellent device, good value for money\"}\n]",
            "output": "{\n  \"word_frequencies\": {\n    \"positive\": {\"excellent\": 2, \"great\": 2, \"good\": 3},\n    \"negative\": {\"poor\": 2, \"terrible\": 1, \"bad\": 1}\n  },\n  \"product_scores\": {\n    \"Laptop\": 1.0,\n    \"Phone\": 1.5,\n    \"Tablet\": -2.0\n  },\n  \"ranked_products\": [(\"Phone\", 1.5), (\"Laptop\", 1.0), (\"Tablet\", -2.0)]\n}"
          }
        ]
    }
]
  